/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef image_TYPES_H
#define image_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace thrift {

struct PixelType {
  enum type {
    Bool = 1,
    Byte = 2,
    Integer16 = 3,
    Integer32 = 4,
    Integer64 = 5,
    Double = 6,
    Binary = 7
  };
};

extern const std::map<int, const char*> _PixelType_VALUES_TO_NAMES;

typedef struct _Image__isset {
  _Image__isset() : width(false), height(false), depth(false), buffer(false), pixeltype(false), endianness(false) {}
  bool width;
  bool height;
  bool depth;
  bool buffer;
  bool pixeltype;
  bool endianness;
} _Image__isset;

class Image {
 public:

  static const char* ascii_fingerprint; // = "844BA63D0F4290FFF7EAAD3992F7537C";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x4B,0xA6,0x3D,0x0F,0x42,0x90,0xFF,0xF7,0xEA,0xAD,0x39,0x92,0xF7,0x53,0x7C};

  Image() : width(1LL), height(1LL), depth(1LL), endianness(0) {
    pixeltype = (PixelType::type)2;

  }

  virtual ~Image() throw() {}

  int64_t width;
  int64_t height;
  int64_t depth;
  std::vector<int8_t>  buffer;
  PixelType::type pixeltype;
  int16_t endianness;

  _Image__isset __isset;

  bool operator == (const Image & rhs) const
  {
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(depth == rhs.depth))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    if (!(pixeltype == rhs.pixeltype))
      return false;
    if (!(endianness == rhs.endianness))
      return false;
    return true;
  }
  bool operator != (const Image &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Image & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
